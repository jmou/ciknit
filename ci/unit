#!/usr/bin/python3
#
# Translate unit to plan.

import os
import shutil
import subprocess
import sys
from collections import namedtuple
from pathlib import Path


Step = namedtuple('Step', ['process', 'inputs', 'source', 'uncacheable'])


class PlanCompiler:
    def __init__(self, flow_dir, copy_dir):
        self.pos = -1
        self.steps = {}
        self.flow_dir = flow_dir
        self.copy_dir = copy_dir

    # Buggy if path contains .. ?
    def copy_input(self, root, path):
        if self.copy_dir:
            copy_path = f'{self.copy_dir}/{path}'
            # dirname does not strip a path component given a trailing slash.
            if copy_path.endswith('/'):
                copy_path = copy_path[:-1]
            os.makedirs(os.path.dirname(copy_path), exist_ok=True)
            src = Path(f'{root}/{path}')
            if src.is_file():
                shutil.copy(src, copy_path)
            elif src.is_dir():
                # We may copy the same or overlapping directories. This
                # recursive copy will overwrite in those cases.
                if sys.version_info >= (3, 8):
                    # https://stackoverflow.com/a/64340026/13773246
                    shutil.copytree(src, copy_path, dirs_exist_ok=True)
                else:
                    # distutils is deprecated since Python 3.10
                    import distutils.dir_util
                    # https://stackoverflow.com/a/12686557/13773246
                    distutils.dir_util.copy_tree(src, copy_path)
            else:
                return None
        # Awkward absolute path special case.
        return path if root else f'/{path}'

    def interpret_input(self, inkey, invalue, root):
        if ':' not in invalue:
            return [f'{inkey}={invalue}']
        input_type, input_path = invalue.split(':', 1)
        if input_type == 'file':
            if input_path.startswith('/'):  # absolute path
                input_path = input_path[1:]
                root = ''
            copied = self.copy_input(root, input_path)
            if not copied:
                print(f'warn: empty directory input {input_path}',
                      file=sys.stderr)
                return []
            value = f'{input_type}:{copied}'
            return [f'{inkey}={value}']
        elif input_type == 'inline':
            return [f'{inkey}={invalue}']
        elif input_type == '_pos':
            return [f'{inkey}={invalue}']
        elif input_type == 'param':
            # This should fail if the param resource is missing.
            if '_param' not in self.steps:
                raise Exception('expected param', input_path)
            return [f'{inkey}=_pos:_param:{input_path}']
        else:
            raise Exception('unknown input type', input_type)

    def translate(self, unit):
        pos = f'main@{self.pos}' if self.pos >= 0 else 'main'
        self.pos += 1

        process = None
        inputs = []
        uncacheable = False
        with open(f'{self.flow_dir}/{unit}') as fh:
            for line in fh:
                if line.startswith('#') or line.isspace():
                    continue
                key, value = line.rstrip().split('=', 1)
                if key == 'process':
                    process = value
                elif key.startswith('in/') or key.startswith('inref/'):
                    if value.startswith('unit:'):
                        _, unit_path, artifact_path = value.split(':', 2)
                        dep = self.translate(unit_path)
                        value = f'_pos:{dep}:{artifact_path}'
                    elif value.startswith('_pos:'):
                        print(f'warning: passing through _pos input in {unit}',
                              file=sys.stderr)
                    inputs.extend(self.interpret_input(key, value, self.flow_dir))
                elif key == 'uncacheable':
                    if value == '1':
                        uncacheable = True
                    else:
                        raise Exception('bad uncacheable value', value)
                else:
                    raise Exception('unsupported key', key)

        self.steps[pos] = Step(process, inputs, f'unit:{unit}', uncacheable)
        return pos

    def add_param(self, line):
        lines = self.interpret_input(*line.split('=', 1), '.')
        if lines:
            step = self.steps.setdefault('_param', Step('identity', [], 'param', False))
            step.inputs.extend(lines)

    def emit_plan(self, fh):
        for pos, step in self.steps.items():
            print(f'_pos={pos}', file=fh)
            if step.uncacheable:
                print('uncacheable=1', file=fh)
            print(f'process={step.process}', file=fh)
            print(f'_source={step.source}', file=fh)
            for line in step.inputs:
                print(line, file=fh)
            print(file=fh)


_, flow_dir, copy_dir, unit, *params = sys.argv
compiler = PlanCompiler(flow_dir, copy_dir)

for param in params:
    compiler.add_param(param)

compiler.translate(unit)
compiler.emit_plan(sys.stdout)
